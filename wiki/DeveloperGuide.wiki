#summary Developer guide, containing useful information for the deeper understanding and extension of Archimetrix.

This page covers the extension of Archimetrix and explains a few details about its inner workings.

<wiki:toc max_depth="4" />

= Extension of the Component Relevance Analysis = 

The relevance analysis is extensible with new relevance strategies. new strategies have to implement the interface `org.archimetrix.relevanceanalysis.components.IComponentsStrategy`. At the moment, the initialization of all available strategies is hard-coded in the class `org.archimetrix.relevanceanalysis.components.RelevantComponentAnalysis`. This should probably be refactored into an extension point mechanism.

= Design Deficiency Detection =

The following activity describes the general process of the design deficiency detection in Archimetrix. Only the parts that are specific for Archimetrix are described here. The description of the pattern detection in Reclipse can be found [ReclipsePatternDetection here].

http://archimetrix.googlecode.com/svn/wiki/images/DeficiencyDetectionDocumentation.png

== Modification of detection engines ==

In order to confine the deficiency detection to the user-selected components, the deficiency patterns are modified before the story diagrams are generated. The modification step is realized in the class `org.reclipse.structure.inference.extended.CatalogModifyingGenerateEnginesStrategy`. First, a constraint is built from the ids of the selected components: _id == selectedComponent1.id | ... | selectedComponentN.id_. This constraint is then added to the two auxiliary pattern _DirectComponentClasses_ and _IndirectComponentClasses. These two patterns represent the membership of classes in components (directly or indirectly, respectively). By adding the id constraint to these patterns, it is ensured that they can only be detected for the user-selected components. Because the deficiency patterns all state something about deficiencies on the component level, they are all using the two auxiliary patterns (or the abstract _Component_ pattern which is extended by _DirectComponentClasses_ and _IndirectComponentClasses_). Therefore, the deficiency patterns too can only be detected for the selected components.

In order to ensure that the modification happens and that the story diagrams are generated from the modified patterns, Archimetrix (or more precisely, the two wizards `StartModifyingCatalogWizard` and `StartPatternDetectionForComponentWizard`) configures the `PrepareDetectionEnginesJob` with the `CatalogModifyingGenerateEnginesStrategy`.

= Extension of the Deficiency Ranking =