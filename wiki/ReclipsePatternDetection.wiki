#summary Description of the pattern detection in Reclipse.

<wiki:toc max_depth="4" />

= Introduction =

In addition to this documentation, you should have a look at the _Reclipse Help Plug-In (org.reclipse.structure.help)_ that can be found in the Reclipse repository (http://dsd-serv.uni-padern.de/svn/reclipse-emf).

The pattern detection in Reclipse consists of three basic parts:

 # _Formalization_ of the patterns that are to be detection.
 # _Generation_ of detection engines (i.e. story diagrams) from the formalized patterns.
 # _Detection_ of the patterns by executing the generated engines.


= Pattern Formalization =

Structural patterns can be specified in a graphical DSL using a GEF editor. The patterns show object structures that represent a certain design pattern or design deficiency and that are to be detected in the host graph. 

http://archimetrix.googlecode.com/svn/wiki/images/PatternFormalizationEditor.png

The formalizations consist of four major parts:

 * Mandatory, core elements:
 * Negative elements:
 * Set fragments:
 * Additonal elements:

More examples and explanations about the DSL can be found here: 
 * [http://ubdok.uni-paderborn.de/servlets/DocumentServlet?id=5163 Ph.D. thesis by JÃ¶rg Niere (German)]
 * [http://ubdok.uni-paderborn.de/servlets/DocumentServlet?id=5625 Ph.D. thesis by Lothar Wendehals (German)]
 * [http://ubdok.uni-paderborn.de/servlets/DocumentServlet?id=11678 Ph.D. thesis by Matthias Meyer (German)]
 * Technical report: https://www.hni.uni-paderborn.de/publikationen/publikationen/?tx_hnippview_pi1[publikation]=6951


== Metamodel registration ==
The objects are typed over a EMF metamodel. In the case of Archimetrix, this metamodel is the combination of Source Code Decorator metamodel, SAM metamodel, and GAST metamodel. The registration of metamodels can be accomplished via the extension point _org.reclipse.structure.specification.metamodel_. The registration of the metamodels used in Archimetrix is performed in the plug-in _org.reclipse.gast_.



= Engine Generation = 

== Generation Process ==

The picture shows the general process for the generation of detection engines from the pattern formalizations.

http://archimetrix.googlecode.com/svn/wiki/images/EngineGenerationProcess.png

The engines are generated into an Ecore file which is typically named _"catalogName".psc.ecore_. This Ecore file contains two packages: 
 * One package for the annotations and 
 * one package for the engines.

For every pattern formalization, an annotation class is generated in the annotations package. Objects of these annotation classes are created during the pattern detection and attached to the pattern occurrences in the host graph.

In the engines package, an engine class is created for each to pattern formalization, provided it is not an abstract pattern. (Abstract patterns only define the roles that are played in a pattern but not how they are connected, i.e. they cannot be detected in the host graph but have to be extended by concrete patterns).

The engine class contains three methods:

 # _annotate_: This is the main method for the detection of a corresponding pattern. It tries to match the core structure of the pattern in the host graph and calls the other methods if necessary.
 # _findAdditionalElements_: This method is used to find additonal fragments of a pattern in the host graph.
 # _findSetFragments_:

== Generation of expressions ==

= Pattern Detection = 

http://archimetrix.googlecode.com/svn/wiki/images/PatternDetectionProcess.png