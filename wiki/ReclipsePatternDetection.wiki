#summary Description of the pattern detection in Reclipse.

<wiki:toc max_depth="4" />

= Introduction =

In addition to this documentation, you should have a look at the _Reclipse Help Plug-In (org.reclipse.structure.help)_ that can be found in the Reclipse repository (http://dsd-serv.uni-padern.de/svn/reclipse-emf).

The pattern detection in Reclipse consists of three basic parts:

 # _Formalization_ of the patterns that are to be detection.
 # _Generation_ of detection engines (i.e. story diagrams) from the formalized patterns.
 # _Detection_ of the patterns by executing the generated engines.


= Pattern Formalization =

Structural patterns can be specified in a graphical DSL using a GEF editor. The patterns show object structures that represent a certain design pattern or design deficiency and that are to be detected in the host graph. More about the DSL can be found in this technical report: [https://www.hni.uni-paderborn.de/publikationen/publikationen/?tx_hnippview_pi1[publikation]=6951 Report]

http://archimetrix.googlecode.com/svn/wiki/images/PatternFormalizationEditor.png

== Metamodel registration ==
The objects are typed over a EMF metamodel. In the case of Archimetrix, this metamodel is the combination of Source Code Decorator metamodel, SAM metamodel, and GAST metamodel. The registration of metamodels can be accomplished via the extension point _org.reclipse.structure.specification.metamodel_. The registration of the metamodels used in Archimetrix is performed in the plug-in _org.reclipse.gast_.



= Engine Generation = 

http://archimetrix.googlecode.com/svn/wiki/images/EngineGenerationProcess.png

= Pattern Detection = 